---
description: 
globs: 
alwaysApply: false
---
# API 및 데이터 관리

이 프로젝트는 Axios와 React Query를 사용하여 API 통신과 데이터 관리를 수행합니다.

## API 구조

API 호출은 다음과 같은 계층 구조를 가집니다:

1. **인스턴스 설정**
   - [src/apis/instance.ts](mdc:src/apis/instance.ts): Axios 인스턴스 설정 및 인터셉터

2. **도메인별 API 정의**
   - 각 도메인별로 디렉토리를 생성하여 관련 API 함수 그룹화
   - 예시: [src/apis/casting/index.ts](mdc:src/apis/casting/index.ts)

3. **React Query Hooks**
   - 각 API에 대해 React Query 훅을 생성하여 상태 관리
   - `src/hooks/server` 디렉토리에 도메인별로 구성
   - 예시: [src/hooks/server/casting/index.ts](mdc:src/hooks/server/casting/index.ts)

## 데이터 접근 패턴

1. **쿼리(Query)**
   - 데이터 조회를 위한 hooks는 `use{Domain}Query` 형태로 작성
   - 단일 데이터: `useSuspenseQuery` 사용
   - 무한 스크롤 목록: `useSuspenseInfiniteQuery` 사용

2. **뮤테이션(Mutation)**
   - 데이터 수정을 위한 hooks는 `use{Domain}{Action}Mutation` 형태로 작성
   - `useMutation` 사용

3. **쿼리 키 관리**
   - 각 도메인별로 `queries.ts` 파일에 쿼리 키와 쿼리 함수 정의
   - 구조화된 쿼리 키를 사용하여 캐싱 및 무효화 관리

## 타입 안전성

- API 요청 및 응답 타입은 OpenAPI 스펙을 기반으로 생성된 타입 사용
- 타입 정의는 `src/types` 디렉토리에 위치
- 특히 API 응답에는 서버 타입을 활용하여 타입 안전성 보장
